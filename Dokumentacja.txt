Zadanie 1.
	Do rozwiązania zadania wykorzystuje implementacje algorytmu PID. Funkcja PID przyjmuje za parametry wartości Kp, Ki, Kd, deltę czasu (delta_t) oraz zadaną wartość (ust_wartosc). Funkcja wykorzystuje też poprzednie wartości błędu i całkowania z poprzednich iteracji. Wynik zwracany jest w formacie float. Przed zwróceniem sprawdzane jest czy wynik mieści się w przedziale od -5 do 5.
	Funkcja obiekt emuluje sterowany obiekt wykorzystując wysterowanie z funkcji PID. Do obliczenia wyniku wykorzystuje liczbę Eulera oraz funkcje pow() z biblioteki math.h. Wynik zwracany jest w postaci zmiennej typu float.
	Wartości zmiennych Kp, Ki i Kd powinny być dostosowane dokładnie do faktycznego zastosowania. Zwiększenie ich spowoduje szybsze osiągniecie przez obiekt zadanej wartości ale może też spowodować przekroczenie przez wynik przedziału -5 do 5. Nie posiadając wartości delty czasu oraz zadanej wartości nie potrafię ustalić optymalnych wartości zmiennych Kp, Ki oraz Kd.
	

Zadanie 2.
	Do rozwiązania zadania wykorzystałem implementacje algorytmu Grahama. Algorytm ten służy do znajdywania otoczki wypukłej zbioru punktów. Funkcja obwod, w której zaimplementowany jest powyższy algorytm, jako dane przyjmuje wektor par zmiennych typu float, gdzie pierwsza liczba to wartość X danego punktu a druga to wartość Y. Na początku funkcja znajduje punkt o najmniejszym X i jeżeli występuje więcej niż jeden o takiej współrzędnej to wybiera ten z najmniejszym Y. Następnie wszystkie punkty zostają tak przesunięte by wybrany poprzednio punkt znalazł się na przecięciu osi współrzędnych. Kolejnym krokiem jest stworzenie wektora par zmiennych typu float oraz int. Pierwsza zmienna zawiera współczynnik kierunkowy punktu od wybranego na początku punktu (obecnie początek układu współrzędnych), druga zaś indeks punktu. Wektor współczynników jest później sortowany, tak by punkty z najmniejszym współczynnikiem kierunkowym (najmniejsze X i Y) były pierwsze. Jeżeli w wektorze występują punkty o takich samych współczynnikach to wszystkie zostają usuwane z wyjątkiem tego o największym oddaleniu od punktu (0,0). Następnie do wyniku dodajemy wybrany na początku punkt oraz pierwszy z wektora. Kolejno za pomocą pętli for idziemy po kolei po wektorze, wykonując poniżej przedstawiony algorytm:
	- za pomocą funkcji zawiera() sprawdź czy ostatni punkt wyniku leży wewnątrz otoczki stworzonej z przedostatniego punktu wyniku i obecnie sprawdzanego punktu z wektora współczynników;
	- jeśli tak to usuń ostatni punkt z wyniku;
	- dodaj do wyniku obecnie sprawdzany punkt z wektora współczynników;
Po wykonaniu się tej pętli zwracany jest wynik w formacie wektora par zmiennych typu float, gdzie pierwsza liczba to wartość X danego punktu a druga to wartość Y.
	Funkcja zawiera() za argumenty przyjmuje trzy pary zmiennych typu float będące współrzędnymi punktów. Sprawdza ona za pomocą iloczynu wektorowego czy punkt B leży wewnątrz otoczki z punktów A i C;
	Jako wejście danych program przyjmuje plik .txt o nazwie "dane.txt" gdzie pierwsza linijka to ilość danych do wczytania, a kolejne to współrzędne punktów.
